version: 2.1
commands:
  deployment_setup:
    steps:
      - run:
          name: "Set the Tier"
          command: |
            TIER=DEV
            if [[ ${CIRCLE_BRANCH} =~ tp53-(prod|test|uat).* ]]; then
              TIER=$(awk -F- '{print toupper($2)}' \<<< ${CIRCLE_BRANCH})
            fi
            echo "export TIER=${TIER}" >> $BASH_ENV
            echo "Tier was identified as ${TIER} for branch ${CIRCLE_BRANCH}"
      - run:
          name: "Assign Tier-level vars"
          command: |
            if [ ! -f deployment.key.json ]; then
              echo "Deployment JSON keyfile not found - loading from CircleCI."
              KEY=${DEPLOYMENT_KEY_TP53_DEV}

            else
              echo "Deployment JSON keyfile found."
              KEY="NA"
            fi
            CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_TP53_DEV}
            SUFFIX=-dev
            if [[ ${TIER} == "PROD" ]]; then
              KEY=${DEPLOYMENT_KEY_TP53_PROD}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_TP53_PROD}
              SUFFIX=
            elif [[ ${TIER} == "TEST" ]]; then
              KEY=${DEPLOYMENT_KEY_TP53_TEST}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_TP53_TEST}
              SUFFIX=-test
            elif [[ ${TIER} == "UAT" ]]; then
              KEY=${DEPLOYMENT_KEY_UAT}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_UAT}
              PROJECT_ID=${DEPLOYMENT_PROJECT_UAT}
              DEP_BUCKET=${DEPLOYMENT_BUCKET_UAT}
              SUFFIX=
            elif [[ ${TIER} == "DEV" ]]; then
              echo "Using default deployment configuration for tier ${TIER}"
            else
              echo "[ERROR] - Unrecognized tier: ${TIER} - exitng."
              exit 1
            fi
            echo "export DEPLOYMENT_KEY=\"${KEY}\"" >> $BASH_ENV
            echo "export DEPLOYMENT_CLIENT_EMAIL=${CLIENT_EMAIL}" >> $BASH_ENV
            echo "export DEPLOYMENT_PROJECT_ID=${PROJECT_ID}${SUFFIX}" >> $BASH_ENV
            echo "export DEPLOYMENT_BUCKET=${DEP_BUCKET}${SUFFIX}" >> $BASH_ENV


  auth:
    steps:
      - run:
          name: "Service Account Auth and Project Settings"
          command: |
            sudo -E /bin/bash ./shell/gcloud_authenticate.sh
            sudo -E /bin/bash ./shell/gcloud-pull-tier-files.sh

  install_cloud_sdk:
    steps:
      - run:
          name: "Install CloudSDK"
          command: |
            echo "export CLOUDSDK_CORE_DISABLE_PROMPTS=1" >> $BASH_ENV
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update && sudo apt-get -y install google-cloud-sdk

jobs:
  build_job:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    working_directory: ~/TP53
    docker:
      - image: circleci/python:3.7.0-stretch
    steps:
      - checkout
      - run:
          name: Set Python Path
          command: |
            echo "export PYTHONPATH=/home/circleci/${CIRCLE_PROJECT_REPONAME}/lib" >> $BASH_ENV
            echo "Testing"
      - restore_cache:
          keys:
            - tp53-lib-{{ checksum "requirements.txt" }}
      - run:
          name: Install Dependencies
          command: |
            sudo -E /bin/bash ./shell/install-deps.sh
      - deployment_setup
      - run:
          name: Compare Config
            sudo -E /bin/bash ./shell/compareConfig.sh "gs://${DEP_BUCKET}${SUFFIX}/${CONFIG_FILE}"
      - save_cache:
          key: tp53-{{ epoch }}
          paths:
            - ./templates
            - ./shell
            - ./static
            - ./bq_builder.py
            - ./filters.py
            - ./graphs.py
            - ./settings.py
            - ./main.py
            - ./utils.py
            - ./LICENSE
            - ./requirements.txt

  deploy_job:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    working_directory: ~/TP53
    docker:
      - image: circleci/python:3.7.0-stretch

    steps:
      - restore_cache:
          keys:
            - tp53-
      - install_cloud_sdk
      - deployment_setup
      - auth
      - deploy:
          command: |
            sudo -E gcloud app deploy --verbosity=debug ./app.yaml --quiet
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_job
      - deploy_job:
          requires:
            - build_job
          filters:
            branches:
              only:
                - master
                - tp53-test
                - tp53-prod
                - tp53-uat
